/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Text Input Service
 #	author : miyako
 #	2015/04/22
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Input Source

		case 1 :
			INPUT_SOURCE_Get_for_language(pResult, pParams);
			break;

		case 2 :
			INPUT_SOURCE_LIST(pResult, pParams);
			break;

		case 3 :
			INPUT_SOURCE_SET(pResult, pParams);
			break;

		case 4 :
			INPUT_SOURCE_Get(pResult, pParams);
			break;

		case 5 :
			INPUT_SOURCE_Get_category(pResult, pParams);
			break;

		case 6 :
			INPUT_SOURCE_Get_ASCII(pResult, pParams);
			break;

		case 7 :
			INPUT_SOURCE_Get_icon(pResult, pParams);
			break;

		case 8 :
			INPUT_SOURCE_Get_name(pResult, pParams);
			break;

		case 9 :
			INPUT_SOURCE_Get_type(pResult, pParams);
			break;

		case 10 :
			INPUT_SOURCE_DISABLE(pResult, pParams);
			break;

		case 11 :
			INPUT_SOURCE_ENABLE(pResult, pParams);
			break;

// --- Keyboard Layout

		case 12 :
			KEYBOARD_LAYOUT_Get_ASCII(pResult, pParams);
			break;

		case 13 :
			KEYBOARD_LAYOUT_SET_OVERRIDE(pResult, pParams);
			break;

		case 14 :
			KEYBOARD_LAYOUT_Get(pResult, pParams);
			break;

		case 15 :
			KEYBOARD_LAYOUT_Get_override(pResult, pParams);
			break;

	}
}

// --------------------------------- Input Source ---------------------------------

#if VERSIONMAC
TISInputSourceRef _RetainInputSourceForName(NSString *name, BOOL includeDisabled)
{
	TISInputSourceRef source = nil;
	
	if(name)
	{
		CFArrayRef sources = TISCreateInputSourceList(NULL, includeDisabled);	
		
		if(sources)
		{		
			unsigned int count = CFArrayGetCount(sources);
			unsigned int i;
			TISInputSourceRef s;
			
			for (i = 0; i < count; ++i) 
			{	
                PA_YieldAbsolute();
				s = (TISInputSourceRef)CFArrayGetValueAtIndex(sources, (CFIndex)i);		
				if(s)
				{
					if(CFStringCompare((CFStringRef)name, 
                    (CFStringRef)TISGetInputSourceProperty(s, kTISPropertyInputSourceID), 
                    kCFCompareAnchored|kCFCompareBackwards) == kCFCompareEqualTo)
					{
						CFRetain(s);
						source = s;
						break;
					}
				}
			}
			CFRelease(sources);
		}	
	}
	return source;	
}

void INPUT_SOURCE_Get_for_language(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	
	NSString *str = Param1.copyUTF16String();
	TISInputSourceRef source = TISCopyInputSourceForLanguage((CFStringRef)str);	
	[str release];
	
	if(source)
	{
		returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID));	
		CFRelease(source);
	}
	
	returnValue.setReturn(pResult);
}

void INPUT_SOURCE_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);
	Param1.setSize(0);
	
	CFArrayRef sources = TISCreateInputSourceList(NULL, FALSE);

	if(sources)
	{		
		unsigned int i, count;
		TISInputSourceRef source;	
		NSString *name;
		
		count = (unsigned int)CFArrayGetCount(sources);
		
		Param1.appendUTF16String(@"");
		
		for (i = 0; i < count; ++i) 
		{
            PA_YieldAbsolute();
			source = (TISInputSourceRef)CFArrayGetValueAtIndex(sources, (CFIndex)i);
			if(source)
			{
				name = (NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID);
				if(TISGetInputSourceProperty(source, kTISPropertyInputSourceIsSelectCapable))
					Param1.appendUTF16String(name);
			}		
		}
		
		CFRelease(sources);

	}
	Param1.toParamAtIndex(pParams, 1);
}

void INPUT_SOURCE_SET(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *str = Param1.copyUTF16String();
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	[str release];
	
	if(source)
	{
		TISSelectInputSource(source);
		CFRelease(source);
	}
}

void INPUT_SOURCE_Get(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;

	TISInputSourceRef source = TISCopyCurrentKeyboardInputSource();	
    if(source){
        returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID));	
        CFRelease(source);
    }
	returnValue.setReturn(pResult);
}

void INPUT_SOURCE_Get_category(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *str = Param1.copyUTF16String();
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	 [str release];
					 
	if(source)	
	{
		returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceCategory));
		CFRelease(source);
	}
	
	returnValue.setReturn(pResult);
}

void INPUT_SOURCE_Get_ASCII(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;

	TISInputSourceRef source = TISCopyCurrentASCIICapableKeyboardInputSource();	
    if(source){
        returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID));	
        CFRelease(source);    
    }
	returnValue.setReturn(pResult);
}

void INPUT_SOURCE_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *str = Param1.copyUTF16String();
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	[str release];
	
	if(source)	
	{
    //iconRef always seem to be nil
    /*
        IconRef iconRef = (IconRef)TISGetInputSourceProperty(source, kTISPropertyIconRef);
        if(iconRef){
            NSImage *icon = [[NSImage alloc]initWithIconRef:iconRef];
            returnValue.setImage(icon);
            [icon release];
        }
     */  
        NSImage *icon;
        
        NSURL *url = (NSURL *)TISGetInputSourceProperty(source, kTISPropertyIconImageURL);
		if(url)
		{      
            icon = [[NSImage alloc]initWithContentsOfURL:url];
            
            if(!icon){
                //the extension is sometimes wrong; try again png -> tiff
                url = [url.URLByDeletingPathExtension URLByAppendingPathExtension:@"tiff"];
                icon = [[NSImage alloc]initWithContentsOfURL:url];
            }
            
            if(icon){
                //return picture without memory leak; avoid the use of - TIFFRepresentation
                NSRect imageRect = NSMakeRect(0, 0, icon.size.width , icon.size.height);
                CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
                CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
                CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
                CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
                CGImageDestinationAddImage(destination, image, properties);
                CGImageDestinationFinalize(destination);
                PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
                *(PA_Picture*) pResult = picture;
                CFRelease(destination);
                CFRelease(properties);
                CFRelease(data);
                [icon release];    
            }
                 
        }else{
            IconRef iconRef = (IconRef)TISGetInputSourceProperty(source, kTISPropertyIconRef);
            if(iconRef){
                NSImage *icon = [[NSImage alloc]initWithIconRef:iconRef];
                //return picture without memory leak; avoid the use of - TIFFRepresentation
                NSRect imageRect = NSMakeRect(0, 0, icon.size.width , icon.size.height);
                CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
                CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
                CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
                CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
                CGImageDestinationAddImage(destination, image, properties);
                CGImageDestinationFinalize(destination);
                PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
                *(PA_Picture*) pResult = picture;
                CFRelease(destination);
                CFRelease(properties);
                CFRelease(data);
                [icon release];
            }
        } 
     	
		CFRelease(source);
	}
}

void INPUT_SOURCE_Get_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	
	NSString *str = Param1.copyUTF16String();		
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	[str release];	
	
	if(source)	
	{
		returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyLocalizedName));
		CFRelease(source);
	}
	
	returnValue.setReturn(pResult);
}

void INPUT_SOURCE_Get_type(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	
	NSString *str = Param1.copyUTF16String();		
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	[str release];	
	
	if(source)	
	{
		returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceType));
		CFRelease(source);
	}

	returnValue.setReturn(pResult);
}

void INPUT_SOURCE_DISABLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *str = Param1.copyUTF16String();		
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	[str release];	
	
	if(source)	
	{
		TISDisableInputSource(source);
		CFRelease(source);
	}
}

void INPUT_SOURCE_ENABLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *str = Param1.copyUTF16String();	
	TISInputSourceRef source = _RetainInputSourceForName(str, YES);
	[str release];
	
	if(source)	
	{
		TISEnableInputSource(source);	
		CFRelease(source);
	}
}

// -------------------------------- Keyboard Layout -------------------------------

void KEYBOARD_LAYOUT_Get_ASCII(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;

	TISInputSourceRef source = TISCopyCurrentASCIICapableKeyboardLayoutInputSource();
    
    if(source){
        returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID));	
        CFRelease(source);
    }
	returnValue.setReturn(pResult);
}

void KEYBOARD_LAYOUT_SET_OVERRIDE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *str = Param1.copyUTF16String();
	TISInputSourceRef source = _RetainInputSourceForName(str, NO);
	[str release];
	
	if(source)
	{
		TISSetInputMethodKeyboardLayoutOverride(source);
		CFRelease(source);
	}
}

void KEYBOARD_LAYOUT_Get(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;

	TISInputSourceRef source = TISCopyCurrentKeyboardLayoutInputSource();
    if(source){
        returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID));	
        CFRelease(source);
    }
	returnValue.setReturn(pResult);
}

void KEYBOARD_LAYOUT_Get_override(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;

	TISInputSourceRef source = TISCopyInputMethodKeyboardLayoutOverride();	
    
    if(source){
        returnValue.setUTF16String((NSString *)TISGetInputSourceProperty(source, kTISPropertyInputSourceID));	
        CFRelease(source);
    }
	returnValue.setReturn(pResult);
}
#endif